{"version":3,"sources":["utils.js","constant.js","components/MineButton.js","containers/Container.js","App.js","reportWebVitals.js","index.js"],"names":["log","console","bind","randomLine01","n","a","i","push","Math","random","randomLine09","arr","randomSquare09","r","clonedArray","array","slice","clonedSquare","res","length","plusArr","x","y","rows","cols","markedSquare","j","testMarkedSquare","module","exports","ensureEqual","b","message","arrayEquals","ensure","condition","GAME_STATUS","MINE_NUMBERS","MineButton","coordinate","number","handleClick","gameStatus","displayed","type","className","onClick","disabled","emptySquare","squareSize","square","Container","props","startGame","endGame","useContext","AppContext","squareData","useState","squareDisplayed","setSquareDisplayed","valid","target","prev","current","queue","directions","shift","renderButtons","buttons","buttonLine","disbaled","generateButtons","React","createContext","App","setGameStatus","setSquareData","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bd034f4.chunk.js","sourcesContent":["const log = console.log.bind(console);\n\n// 定义我们用于测试的函数\nconst ensureEqual = function (a, b, message) {\n  if (a !== b) {\n    log(`${message}, (${a}) 不等于 (${b})`);\n  } else {\n    log(\"测试成功\");\n  }\n};\n\nconst arrayEquals = function (a, b) {\n  // a 和 b 都是数组\n  // 如果这两个数组每一个位置对应的元素都相等, 那么说明 a 与 b 相等\n  // 此时返回 true, 否则返回 false\n\n  /*\n    提示\n    a. 如果这两个参数的长度不相等，直接返回 false\n    b. 遍历参数 a，每次遍历的元素为 a[i]，判断 a[i] 与 b[i] 的值\n        如果 a[i] 与 b[i] 不相等，直接返回 false\n    c. 循环结束后，返回 true\n    */\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst ensure = function (condition, message) {\n  // 在条件不成立的时候, 输出 message\n  if (!condition) {\n    log(\"*** 测试失败:\", message);\n  } else {\n    log(\"||| 测试成功\");\n  }\n};\n\nconst join = function (delimiter, array) {\n  /*\n    delimiter 是 string\n    array 是包含 string 的 array\n\n    把 array 中的元素用 delimiter 连接成一个字符串并返回\n    具体请看测试\n\n    提示：\n        在循环里面拼接 delimiter\n\n    分步提示：\n        1. 把 array 中的第一个元素赋值给 s\n        2. 从 1 开始遍历数组 array，每次遍历的时候把 delimiter 和 遍历的元素 e 看成一个整体 (delimiter + e)\n        3. 每次遍历的时候把这个整体累加到 s\n        4. 循环结束的时候 s 就是拼接好的字符，返回这个结果 s\n    */\n  let res = array[0];\n  for (let i = 1; i < array.length; i++) {\n    res += delimiter + array[i];\n  }\n  return res;\n};\n\n// 作业 2\n// 实现函数\nconst split = function (s, delimiter = \" \") {\n  /*\n    s 是 string\n    delimiter 是 string, 默认为空格 ' '\n\n    以 delimiter 为分隔符号, 返回一个 array\n    例如\n    split('1 2 3', ' ') 返回 ['1', '2', '3']\n    split('a=b&c=d', '&') 返回 ['a=b', 'c=d']\n    注意, 测试 array 是否相等得自己写一个函数用循环来跑\n\n    提示：\n        用循环找到 delimiter，记录两个变量 start 和 end 来 slice 出子字符串，把子字符串添加到数组中\n\n    分步提示：\n        1. 定义一个数组 l 来存储结果，初始值为 []\n        2. 计算出 delimiter 的长度 space，因为 delimiter 的长度不一定为 1\n        3. 使用 start 来记录每次 slice 的初始位置，初始值为 0\n        4. 遍历字符串，slice 子字符串 slice(i, i + space)，\n            如果子字符串与 delimiter 相等，把相应数据存储到数组 l 中。\n            数据的计算方式是 s.slice(start, i)\n        5. 改变 start 的值，把 i + space 设置为新的 start 下标\n        6. 循环结束后，还要把最后一个元素添加到数组 l 中，这个元素为 s.slice(start)\n        7. 最后数组 l 就是需要的结果，返回 l\n        8. 注意，判断数组相等使用以前作业里的 arrayEquals\n    */\n\n  const res = [];\n  let len = delimiter.length;\n  let start = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.slice(i, i + len) === delimiter) {\n      res.push(s.slice(start, i));\n      start = i + len;\n    }\n  }\n  res.push(s.slice(start));\n  return res;\n};\n\n// 作业 3\n// 实现函数\nconst replaceAll = function (s, old, newString) {\n  /*\n    s old newString 都是 string\n    返回一个「将 s 中出现的所有 old 字符串替换为 new 字符串」的字符串\n\n    提示\n        先按照 old 来 split 出一个数组，然后用 newString 来 join 这个数组\n\n    分步提示：\n        1. 调用作业 2 的 split 函数，按照 old 来 split，结果为 l\n        2. 调用作业 1 的 join 函数，delimiter 为 newString，array 为第一步的 l，结果为 result\n        3. 返回第二步的计算结果 result\n    */\n\n  const arr = s.split(old);\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res += newString + arr[i];\n  }\n  return res;\n};\n\n// 作业 4\n// 实现函数\nconst str1 = function (n) {\n  /*\n    n 是 int\n    返回这样规律的字符串, 特殊情况不考虑\n    n       返回值\n    1       '1'\n    2       '121'\n    3       '12321'\n\n    提示：\n        把返回值分成两部分，用两个循环分别来生成这两部分\n\n    分步提示：\n        1. 定义字符串 s 来存储计算的结果，初始值为 ''\n        2. 生成 12345...n 这部分内容\n            循环从 0 到 n，把每次循环的元素转成字符串，并且累加到 s 上\n        3. 生成 n...4321 这部分内容\n            循环从 n-1 到 0，把每次循环的元素转成字符串，并且累加到 s 上\n        4. 循环结束后 s 就是计算的结果，返回 s\n    */\n\n  let res = \"\";\n  for (let i = 1; i <= n; i++) {\n    res += i;\n  }\n  for (let i = 1; i < n; i++) {\n    res += n - i;\n  }\n  return res;\n};\n\n// 作业 5\n// 实现函数\nconst str2 = function (n) {\n  /*\n    n 是 int\n    返回这样规律的字符串, 特殊情况不考虑\n    n       返回值\n    1       'A'\n    2       'ABA'\n    3       'ABCBA'\n\n    提示：\n        和作业 4 类似，用两个循环来分别生成前半部分和前后部分\n\n    分步提示：\n        1. 定义一个字符串 s 来存储计算的结果，初始值为 ''\n        2. 同作业 4 的处理方式，不同的是从 upper 里面用下标取出字母\n            upper 是以前作业里的字符串，包含所有大写字母\n        3. 同作业 4 的处理方式，不过需要注意循环从 n - 2 到 0\n        4. 循环结束后 s 就是计算的结果，返回 s\n    */\n  let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let res = \"\";\n  for (let i = 1; i <= n; i++) {\n    res += upper[i - 1];\n  }\n  for (let i = 1; i < n; i++) {\n    res += upper[n - i - 1];\n  }\n  return res;\n};\n\n// 6\nconst addLine = function (n) {\n  // 生成从 n + 1 = n + 1 到 n + n = n + n 的值字符串\n  // 仔细观察测试结果, 每一个式子的后面有一个空格\n  let s = \"\";\n  for (let i = 1; i <= n; i++) {\n    s += `${n} + ${i} = ${n + i} `;\n  }\n  return s;\n};\n\n// 7\n// 实现加法口诀表\nconst addTable = function (n) {\n  /*\n    返回这样格式的加法口诀表(没写全, 但是要返回完整的)\n    注意, 这只是我输入的内容\n    实际上你普通 log 出来是不会有回车的\n    [\n        '1 + 1 = 2 ',\n        '2 + 1 = 3  2 + 2 = 4 ',\n        '3 + 1 = 4  3 + 2 = 5  3 + 3 = 6 ',\n    ]\n\n    分步提示：\n        1. 定义一个数组 table 来存储加法口诀表，初始值为 []\n        2. 循环从 0 开始，到 n 结束（包含 n），在每次循环里调用 addLine 函数，\n            把调用结果 push 到 table 中\n        3. 循环结束后 table 就是加法口诀表，但是这个目前是写在一行里面\n            如果想要有回车，用作业 1 的函数 join('\\n', addTable())\n    */\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(addLine(i));\n  }\n  return arr;\n};\n\n// 8\n// 实现函数\nconst range1 = function (start, end) {\n  /*\n    start end 都是 int\n\n    返回一个 array, 假设 start 为 1, end 为 5, 返回数据如下\n    [1, 2, 3, 4]\n\n    提示：\n        循环从 start 开始，end 结束（不包含 end），依次 push 到数组中\n\n    分步提示：\n        1. 循环从 start 开始，end 结束（不包含 end），\n            每次循环的元素 push 到数组中\n        2. 返回数组\n    */\n  const arr = [];\n  for (let i = start; i < end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n// 9\n// 实现函数\nconst range2 = function (start, end, step = 1) {\n  /*\n    start end step 都是数字\n    step 是大于 0 的正整数\n\n    返回一个 array\n    假设 start=1, end=5, step=1 返回数据如下\n    [1, 2, 3, 4]\n    假设 start=0, end=6, step=2 返回数据如下\n    [0, 2, 4]\n\n    提示：\n        类似作业 7，不同的是每次循环递增的不是 1，而是 step\n\n    分步提示：\n        1. 步骤和作业 7 类似，但是循环递增的是 step\n        2. 返回数组\n    */\n  let arr = [];\n  for (let i = start; i < end; i += step) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n// 10\n// 实现函数\nconst range3 = function (start, end, step = 1) {\n  /*\n    start end step 都是数字\n\n    和 range2 一样, 但是要求支持负数 step\n    使用 while 循环\n    返回一个 array\n    假设 start=1, end=5, step=1 返回数据如下\n    [1, 2, 3, 4]\n    假设 start=6, end=0, step=-1 返回数据如下\n    [6, 5, 4, 3, 2, 1]\n\n    提示：\n        判断 start 和 end 的大小，然后循环生成数组\n\n    分步提示：\n        1. 如果 start < end，调用作业 8 的 range2\n        2. 否则，类似作业 8，循环从 start 开始，到 end 结束（不包括 end），每次递减 step\n        3. 返回数组\n    */\n  if (start < end) {\n    return range2(start, end, step);\n  }\n  let i = start;\n  let arr = [];\n  while (i > end) {\n    arr.push(i);\n    i += step;\n  }\n  return arr;\n};\n\n// 11\n// 实现函数\nconst random01 = function () {\n  /*\n    js 标准数学库有一个随机数函数\n    Math.random()\n    它返回 0 - 1 之间的小数\n\n    用它实现本函数, 返回 0 或 1\n\n    提示：\n        这道题目有多种实现方式，我们这里拿 Math.random() 与 0.5 比较\n\n    分步提示：\n        1. 如果 Math.random() > 0.5，返回 1\n        2. 否则返回 0\n    */\n  return Math.random() > 0.8 ? 1 : 0;\n};\n\n// 12\n// 实现函数\nconst randomLine01 = function (n) {\n  /*\n    返回一个只包含了 0 1 的随机 array, 长度为 n\n    假设 n 为 5, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    [0, 0, 1, 0, 1]\n\n    提示：\n        循环 n 次，每次调用 random01，push 到数组中\n\n    分步提示：\n        1. 循环 n 次，每次调用 random01，把结果 push 到数组中\n        2. 返回数组\n    */\n  let a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(random01());\n  }\n  return a;\n};\n\n// 13\nconst randomSquare01 = function (n) {\n  /*\n    返回以下格式的数据\n    假设 n 为 3, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    注意, 这只是一个 array, 并不是它显示的样子\n    注意, 这是一个 array 不是 string\n    [\n        [0, 0, 1],\n        [1, 0, 1],\n        [0, 0, 0],\n    ]\n    返回, 包含了 n 个『只包含 n 个「随机 0 1」的 array』的 array\n\n    提示：\n        循环 n 次，每次调用 randomLine01，把结果 push 到数组中\n\n    分步提示：\n        1. 循环 n 次，每次调用 randomLine01，把结果 push 到数组中\n        2. 返回数组\n    */\n\n  let a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(randomLine01(n));\n  }\n  return a;\n};\n\n// 14\nconst randomLine09 = function (n) {\n  /*\n    返回一个只包含了 0 9 的随机 array, 长度为 n\n    假设 n 为 5, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    [0, 0, 9, 0, 9]\n\n    提示：\n        先生成只包含 0 1 的数组，然后把数组里的 1 替换成 9\n\n    分步提示：\n        1. 调用函数 randomLine01 得到一个只包含 0 1 的数组 line\n        2. 遍历这个数组，如果遍历出来的元素为 1，就把这个位置的元素值设置为 9\n        3. 返回 line\n    */\n  let arr = randomLine01(n);\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === 1) {\n      arr[i] = 9;\n    }\n  }\n  return arr;\n};\n\n// 14\nconst randomSquare09 = function (n) {\n  /*\n        返回一个随机二维数组, 只有 0, 9\n    [\n        [0, 9, 0, 0],\n        [0, 0, 9, 0],\n        [9, 0, 9, 0],\n        [0, 9, 0, 0],\n    ]\n    */\n\n  let r = [];\n  for (let i = 0; i < n; i++) {\n    r.push(randomLine09(n));\n  }\n  return r;\n};\n\n// 15\nconst clonedArray = function (array) {\n  // array 是一个数组, 把 array 的元素复制到另一个新数组\n  // 返回新数组\n  // 这样改变旧数组的时候, 新数组不会发生改变\n\n  // 注意, 这个作业可以用 array.slice(0) 完成\n  return array.slice(0);\n};\n\n// 16\nconst markedLine = function (array) {\n  /*\n    array 是一个只包含了 0 9 的 array\n    返回一个标记过的 array\n    ** 注意, 使用一个新数组来存储结果, 不要直接修改老数组\n    复制数组用 array.slice(0) 实现\n\n    标记规则如下\n    对于下面这样的 array\n    [0, 0, 9, 0, 9]\n    标记后是这样\n    [0, 1, 9, 2, 9]\n\n    规则是, 0 会被设置为左右两边 9 的数量\n\n    提示：\n        把 9 左右加 1，注意判断 9 是否在两边\n\n    分步提示：\n        1. 先使用 clonedArray 复制数组 array，用变量 line 存储\n        2. 遍历数组 line，每次遍历的元素是 n\n        3. 如果 n 为 9，并且 n 不是第一个元素，并且 n 左边的数字不是 9，把 n 左边的数字 + 1\n        4. 如果 n 为 9，并且 n 不是最后一个元素，并且 n 右边的数字不是 9，把 n 右面的数字 + 1\n        5. 返回数组 line\n    */\n  let res = clonedArray(array);\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] !== 9) {\n      continue;\n    }\n    if (i !== 0) {\n      res[i - 1] += 1;\n    }\n    if (i !== array.length - 1) {\n      res[i + 1] += 1;\n    }\n  }\n  return res;\n};\n\n// !!! 17 重点！！！！\nconst clonedSquare = function (array) {\n  // array 是一个二维数组, 即 array 的每一个元素依然是一个数组\n  // 把 array 的每一个数组元素的元素复制到另一个新数组\n  // 返回新数组\n  // 提示: 遍历 array, 复制每一个元素到新数组即可\n  let res = [];\n  for (let i = 0; i < array.length; i++) {\n    res.push(clonedArray(array[i]));\n  }\n  return res;\n};\n\n// 18\n// 注意, 这道题比较麻烦, 你要是不会, 就填写答案「这道题目我放弃」的全拼\nconst plusArr = function (arr, x, y) {\n  const rows = arr.length;\n  if (rows === 0) {\n    return;\n  }\n\n  const cols = arr[0].length;\n\n  if (x < 0 || y < 0 || x >= rows || y >= cols) {\n    return;\n  }\n\n  if (arr[x][y] === 9) {\n    return;\n  }\n\n  arr[x][y]++;\n};\n\nconst markedSquare = function (array) {\n  /*\n    array 是一个「包含了『只包含了 0 9 的 array』的 array」\n    返回一个标记过的 array\n    ** 注意, 使用一个新数组来存储结果, 不要直接修改老数组\n\n    范例如下, 这是 array\n    [\n        [0, 9, 0, 0],\n        [0, 0, 9, 0],\n        [9, 0, 9, 0],\n        [0, 9, 0, 0],\n    ]\n\n    这是标记后的结果\n    [\n        [1, 9, 2, 1],\n        [2, 4, 9, 2],\n        [9, 4, 9, 2],\n        [2, 9, 2, 1],\n    ]\n\n    规则是, 0 会被设置为四周 8 个元素中 9 的数量\n\n    提示：\n        这道题比较麻烦, 你要是不会, 就直接写「这道题目我不会」\n        这道题目循环调用前面作业的 markedLine，这道题目不要求写测试\n\n    分步提示：\n        1. 先定义一个 clonedSquare 函数，把 array 的内容复制到一个新数组中\n        2. 调用 clonedSquare 函数，得到 square\n        3. 遍历 square，每次遍历的元素为 line\n        4. 遍历 line，调用一个 markAround 函数，传入 square, i, j\n        5. 实现 markAround 函数，对于每一个 square[i][j] 这样的元素都按照规则 +1\n            分 4 个顶角、4 条边和剩下的元素这几种情形\n        6. 两重遍历结束后，square 就是需要的结果，return square 即可。\n    */\n\n  let res = clonedSquare(array);\n  let n = array.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (array[i][j] !== 9) {\n        continue;\n      }\n\n      plusArr(res, i - 1, j);\n      plusArr(res, i + 1, j);\n      plusArr(res, i, j - 1);\n      plusArr(res, i, j + 1);\n\n      plusArr(res, i - 1, j - 1);\n      plusArr(res, i - 1, j + 1);\n      plusArr(res, i + 1, j - 1);\n      plusArr(res, i + 1, j + 1);\n    }\n  }\n  return res;\n};\n\nconst testMarkedSquare = function () {\n  let arr = randomSquare09(5);\n  log(arr);\n\n  let res = markedSquare(arr);\n  log(res);\n};\ntestMarkedSquare();\n\nmodule.exports = {\n  log,\n  ensureEqual,\n  arrayEquals,\n  ensure,\n  randomSquare09,\n  markedSquare,\n  clonedSquare,\n};\n","export const GAME_STATUS = {\n  NOT_START: 0,\n  STARTED: 1,\n  OVER: 2,\n};\n\nexport const MINE_NUMBERS = {\n  MINE: 9,\n  EMPTY: 0,\n};\n","import React from \"react\";\nimport \"./MineButton.css\";\nimport { MINE_NUMBERS, GAME_STATUS } from \"../constant\";\n\nexport const MineButton = ({\n  coordinate,\n  number,\n  handleClick,\n  gameStatus,\n  displayed,\n}) => {\n  const clickButton = () => {\n    handleClick(coordinate.x, coordinate.y);\n  };\n\n  const getDisplayStr = () => {\n    if (number === MINE_NUMBERS.MINE) {\n      return \"X\";\n    }\n    if (number === MINE_NUMBERS.EMPTY) {\n      return \" \";\n    }\n    return number + \"\";\n  };\n\n  const display = () => {\n    if (gameStatus === GAME_STATUS.NOT_START) {\n      return \" \";\n    }\n\n    // clicked mine, game over\n    if (gameStatus === GAME_STATUS.OVER && number === MINE_NUMBERS.MINE) {\n      return \"X\";\n    }\n\n    return displayed ? getDisplayStr() : \" \";\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={`Mine${displayed ? \" Displayed\" : \"\"}`}\n      onClick={clickButton}\n      disabled={gameStatus !== GAME_STATUS.STARTED}\n    >\n      {display()}\n    </button>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { AppContext } from \"../App\";\nimport { MineButton } from \"../components/MineButton\";\nimport { clonedSquare } from \"../utils\";\nimport { MINE_NUMBERS, GAME_STATUS } from \"../constant\";\nimport \"./Container.css\";\n\nconst emptySquare = (squareSize) => {\n  const square = [];\n  for (let i = 0; i < squareSize; i++) {\n    square.push([]);\n  }\n  return square;\n};\n\nconst Container = (props) => {\n  const { startGame, endGame } = props;\n  const { gameStatus, squareData, squareSize } = useContext(AppContext);\n  const [squareDisplayed, setSquareDisplayed] = useState(\n    emptySquare(squareSize)\n  );\n\n  const valid = (target) => {\n    const rows = squareData.length;\n    if (rows === 0) {\n      return false;\n    }\n    const cols = squareData[0].length;\n    return target.x >= 0 && target.y >= 0 && target.x < rows && target.y < cols;\n  };\n\n  // when click mineButton, rerender displayed buttons\n  const renderButtons = (prev, squareData, x, y) => {\n    const displayed = clonedSquare(prev);\n    if (squareData[x][y] !== 0) {\n      displayed[x][y] = true;\n      return displayed;\n    }\n\n    // when squareData[x][y] === 0\n    const queue = [{ x, y }];\n    const directions = [\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, 1],\n      [0, -1],\n      [-1, 1],\n      [-1, 0],\n      [-1, -1],\n    ];\n    let current;\n    while (queue.length > 0) {\n      current = queue.shift();\n      if (displayed[current.x][current.y]) {\n        continue;\n      }\n      displayed[current.x][current.y] = true;\n      if (squareData[current.x][current.y] !== 0) {\n        continue;\n      }\n\n      // empty button\n      for (let i = 0; i < directions.length; i++) {\n        const target = {\n          x: current.x + directions[i][0],\n          y: current.y + directions[i][1],\n        };\n        if (valid(target)) {\n          queue.push(target);\n        }\n      }\n    }\n\n    return displayed;\n  };\n\n  const handleClick = (x, y) => {\n    // click mine\n    if (squareData[x][y] === MINE_NUMBERS.MINE) {\n      return endGame();\n    }\n\n    // click empty button whose number = 0\n    setSquareDisplayed((prev) => renderButtons(prev, squareData, x, y));\n  };\n\n  const generateButtons = function () {\n    const buttons = [];\n    for (let x = 0; x < squareSize; x++) {\n      const buttonLine = [];\n      for (let y = 0; y < squareSize; y++) {\n        buttonLine.push(\n          <MineButton\n            coordinate={{ x, y }}\n            number={squareData ? squareData[x][y] : -1}\n            handleClick={handleClick}\n            gameStatus={gameStatus}\n            disbaled={gameStatus !== GAME_STATUS.STARTED}\n            displayed={squareDisplayed ? squareDisplayed[x][y] : false}\n          />\n        );\n      }\n      buttons.push(<div className=\"Row\">{buttonLine}</div>);\n    }\n    return buttons;\n  };\n\n  return (\n    <div className=\"Container\">\n\n      <button\n        className=\"Start\"\n        onClick={() => {\n          setSquareDisplayed(emptySquare(squareSize));\n          startGame();\n        }}\n      >\n        Start MineSweeper\n      </button>\n      {generateButtons()}\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Container from \"./containers/Container\";\nimport { randomSquare09, markedSquare, log } from \"./utils\";\nimport { GAME_STATUS } from \"./constant\";\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n  const squareSize = 20;\n  const [gameStatus, setGameStatus] = useState(0);\n  const [squareData, setSquareData] = useState();\n\n  const startGame = () => {\n    // generate new mine data\n    setSquareData(markedSquare(randomSquare09(squareSize)));\n    setGameStatus(GAME_STATUS.STARTED);\n  };\n\n  const endGame = () => {\n    setGameStatus(GAME_STATUS.OVER);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        // 0 not start\n        // 1 gaming\n        // 2 over\n        gameStatus,\n        squareData,\n        squareSize,\n      }}\n    >\n      <Container className=\"App\" startGame={startGame} endGame={endGame} />\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}